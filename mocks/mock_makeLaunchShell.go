// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/maker/makeLaunchShell.go

// Package mock_maker is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	val "github.com/puutaro/repbash/pkg/val"

	gomock "github.com/golang/mock/gomock"
)

// MockIoGetter is a mock of IoGetter interface.
type MockIoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIoGetterMockRecorder
}

// MockIoGetterMockRecorder is the mock recorder for MockIoGetter.
type MockIoGetterMockRecorder struct {
	mock *MockIoGetter
}

// NewMockIoGetter creates a new mock instance.
func NewMockIoGetter(ctrl *gomock.Controller) *MockIoGetter {
	mock := &MockIoGetter{ctrl: ctrl}
	mock.recorder = &MockIoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoGetter) EXPECT() *MockIoGetterMockRecorder {
	return m.recorder
}

// GetFannelPath mocks base method.
func (m *MockIoGetter) GetFannelPath(mainRepValMap map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFannelPath", mainRepValMap)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFannelPath indicates an expected call of GetFannelPath.
func (mr *MockIoGetterMockRecorder) GetFannelPath(mainRepValMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFannelPath", reflect.TypeOf((*MockIoGetter)(nil).GetFannelPath), mainRepValMap)
}

// GetFromUrl mocks base method.
func (m *MockIoGetter) GetFromUrl(url string) val.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromUrl", url)
	ret0, _ := ret[0].(val.Result)
	return ret0
}

// GetFromUrl indicates an expected call of GetFromUrl.
func (mr *MockIoGetterMockRecorder) GetFromUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromUrl", reflect.TypeOf((*MockIoGetter)(nil).GetFromUrl), url)
}
